var console,
    stat,
    map,
    lineSymbol,
    initLat = 38.823,
    initLng = -99.712,
    zoom = 4,
    initZoom = 4,
    markerArray = [],
    lineArray = [],
    tLimit = 10,
    speed = 2,
    isAuto = true,
    tempLat,
    tempLng;


console = document.getElementById("console-text");
stat = document.getElementById("stat-text");

function addText(box,text) {
    box.value += text;
    //var txt = document.createTextNode(text);
    //box.appendChild(txt);
    stat.scrollTop = stat.scrollHeight; // scoll down when adding text
    // check for commands
    
    
    
}

function myLink(){

    for(i = 0; i < markerArray.length-1; i++){

    var lineSymbol = new google.maps.Marker({
        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
    scale: 2,
    strokeOpacity: 1.0,
    strokeColor: ranColor()
    });

      var line = new google.maps.Polyline({
        strokeColor: 'yellow',
        strokeOpacity: 0.2,
        path: [markerArray[i].getPosition(), markerArray[markerArray.length - 1].getPosition()],
        //path: [{lat: 22.291, lng: 153.027}, {lat: 18.291, lng: 153.027}],
        icons: [{
          icon: lineSymbol,
          offset: '100%'
        }],
        map: map
      });

  
            lineArray.push(line);

      animateCircle(line);
    }


 


}

function ranColor(){
var colors = ['purple', 'white'];

return colors[Math.floor(Math.random() * colors.length)];

}

//sat
function initMap() {
  // Create a map object and specify the DOM element for display.
  
    map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: initLat, lng: initLng},
    //mapTypeId: google.maps.MapTypeId.SATELLITE,
    mapTypeId: google.maps.MapTypeId.HYBRID,

    scrollwheel: false,
    zoom: zoom
    });
  

  
    google.maps.event.addListener(map, "click", myAdd);
    
    //geocoder = new google.maps.Geocoder();

}

function myAdd(event){
  var lat = event.latLng.lat();
        var lng = event.latLng.lng();
        // populate yor box/field with lat, lng
        //alert("Lat=" + lat + "; Lng=" + lng);
        if(markerArray.length < tLimit ){
            var n =  "Target"
                c = "red",
                s = 8;
            if(markerArray.length == 0){
            n = "Origin";
            c = "blue";
            s = 12;
            }
            addText(stat,"\n" + n + " " + markerArray.length + " location:\n  Lat: " + lat + "\n  Lng: " + lng + "\n");
            //tArray.push(new Target(lat, lng));
            
            var marker = new google.maps.Marker({
            position: {lat: lat, lng: lng},
            icon: {
            path: google.maps.SymbolPath.CIRCLE,
            strokeColor: c,
            strokeOpacity: 0.5,
            scale: s
            },
            map: map
            });
            markerArray.push(marker);
            myLink();
        }
        else{
        //that's enough targets
        
        } 

}



        

// at fixed intervals.
function animateCircle(line) {
    var count = 0;
    window.setInterval(function() {
      count = (count + speed) % 200;

      var icons = line.get('icons');
      icons[0].offset = (count / 2) + '%';
      line.set('icons', icons);
  }, 2);
}


// Deletes all markers in the array by removing references to them.
function clearMarkers() {
    for (var i = 0; i < markerArray.length; i++) {
        markerArray[i].setMap(null);
    }
    for (var i = 0; i < lineArray.length; i++) {
        lineArray[i].setMap(null);
    }
    
    markerArray= [];
}

function goTo(m){
    map.panTo(markerArray[m].position);
    map.setZoom(6);
}


function myCommand(str){
    try {
    var par = str.split(" "),
    num = par.length;
    
    c = par[0];
    if(c == "clear"){
        console.value = "";
    
    }
    else if(c == "map"){
        if(num ==1){
            map.panTo({lat: initLat, lng: initLng});
            map.setZoom(initZoom);
        }
        else if(par[1] == "reset"){
            clearMarkers();
            map.setZoom(initZoom);
            addText(stat,"\n//====================//\n");
        }
        else if(par[1] == "in"){
            map.setZoom(++zoom);
        }
        else if(par[1] == "out"){
            map.setZoom(--zoom);
        }

        else{
            goTo(parseInt(par[1], 10));
        }
    
    }
    }
    catch(err) {
       //output error 
    }
    
        //alert( "*" +lastLine+"*");
}

var autoString = "//Code name: csmojo\n//Objective: gain control of skynet data server\nmap out\nmap in\n",
count = 0;

console.onkeydown = function keyed(e){
    e = e || window.event;
    var myKey = e.keyCode;
    
    
    //alt
    if(myKey == 18){
        isAuto = !isAuto;
    }
    
    //isAuto
    if(isAuto){
        e.preventDefault();
        this.value = this.value + autoString[count];// feed in auto script  
       
    }

    
    //enter 
    if(myKey == 13 || autoString[count] == "\n") {    
        var content = this.value;             
        var lastLine = content.substr(content.slice(0, - 1).lastIndexOf("\n")+1);
        //check command
        myCommand(lastLine.trim());
    }  
   
    count++;
    if(count >= autoString.length){ count = 0;}
 
}



var today = new Date();
var platform = window.navigator.platform;
document.getElementById('plText').innerHTML = platform;
document.getElementById('dtText').innerHTML = today;


//


function my_hide(id){
    document.getElementById(id).style.zIndex = -1;  
    console.focus();  
}


function my_show(id){
    document.getElementById(id).style.zIndex = 1;

}


var text = document.getElementById('tool-text'),
    binary = document.getElementById('tool-binary'),
    hex = document.getElementById('tool-hex');

function pad(num, size) {
    return ("00000000" + num).substr(-size);
}

text.onkeyup = function(){
    var input = text.value;
    binary.value = "";
    hex.value = "";
    for (i=0; i < input.length; i++) {
        binary.value += pad(input[i].charCodeAt(0).toString(2), 8) + " ";
        hex.value += input[i].charCodeAt(0).toString(16) + " ";
    }
}

// -1 on binary and hex is to remove tailing space

binary.onkeyup = function(){
    var input = binary.value;
    text.value = "";
    hex.value = "";
    
    var all = input.split(" ");
    
     for (i=0; i < all.length-1; i++) {
        var t =  String.fromCharCode(parseInt(all[i], 2))
        text.value += t;
        hex.value += t.charCodeAt(0).toString(16) + " ";
    }
    
}


hex.onkeyup = function(){
    var input = hex.value;
    text.value = "";
    binary.value = "";
    
    var all = input.split(" ");
    
     for (i=0; i < all.length-1; i++) {
        var t =  String.fromCharCode(parseInt(all[i], 16))
        text.value += t;
        binary.value += pad(t.charCodeAt(0).toString(2),8) + " ";
    }
    
}





my_show("modal");
